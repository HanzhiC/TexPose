_parent_: options/base.yaml

group: Duck                                             # name of experiment group
arch:                                                       # architectural optionss
    layers_feat: [null,256,256,256,256,256,256,256,256]     # hidden layers for feature/density MLP]
#    layers_rgb: [null,128,3]                                # hidden layers for color MLP]
    layers_rgb: [null,256,256,256,3]                         # hidden layers for color MLP]
    skip: [4]                                               # skip connections
    posenc:                                                 # positional encoding:
        L_3D: 10                                             # number of bases (3D point)
#        L_3D: 6                                             # number of bases (3D point)
#        L_3D_rgb: 4
        L_view:                                             # number of bases (viewpoint)
    density_activ: softplus                                 # activation function for output volume density
    tf_init: true                                           # initialize network weights in TensorFlow style

nerf:                                                       # NeRF-specific options
    view_dep: false                                          # condition MLP on viewpoint
    depth:                                                  # depth-related options
        param: metric                                       # depth parametrization (for sampling along the ray)
        range: [0, 3]                                     # near/far bounds for depth sampling, measured in *meter* unit
        scale: 10                                           # Transform to other metric (such as dm) for pose and depth,  which stored as m for default
        range_source: 'box'
        box_mask:

    sample_intvs: 64                                        # number of samples
    sample_stratified: true                                 # stratified sampling
    fine_sampling: false                                    # hierarchical sampling with another NeRF
    sample_intvs_fine:                                      # number of samples for the fine NeRF
    rand_rays: 2048                                         # number of random rays for each step
    ray_obj_ratio: 0                                      # number of rays sampled on CAD models
    density_noise_reg:                                      # Gaussian noise on density output as regularization
    setbg_opaque:                                           # fill transparent rendering with known background color (Blender only)
    mask_obj: True

data:                                                       # data options
    dataset: lm                                             # dataset name
    object: phone                                       # scene name
    scene: scene_naive
    image_size: [128,128]                                   # input image sizes [height,width]
    num_workers: 4                                          # number of parallel workers for data loading
    preload: true                                           # preload the entire dataset into the memory
    bgcolor:                                                # background color (Blender only)
    val_on_test: False
    val_sub:
    reference_obj_idx: [1]
    dynamic_object_idx: []
    pose_source: gt
    pose_loop:
    erode_mask:
    erode_mask_loss: True
    multi_obj:
    scene_info_source:
    box_format: wh
    mask_visib_source: mask_visib                           # mask_pred_init

camera:                                                     # camera options
    model: perspective                                      # type of camera model
    ndc: false                                              # reparametrize as normalized device coordinates (NDC)

loss_weight:                                                # loss weights (in log scale)
    render: 0                                               # RGB rendering loss
    depth: -1
    mask: -1
    consis3d:
    render_fine:                                            # RGB rendering loss (for fine NeRF)
    feat:

optim:                                                      # optimization options
    lr: 5.e-4                                               # learning rate (main)
    lr_end: 1.e-4                                           # terminal learning rate (only used with sched.type=ExponentialLR)
    sched:                                                  # learning rate scheduling options
        type: ExponentialLR                                 # scheduler (see PyTorch doc)
        gamma: 0.999992                                                # decay rate (can be empty if lr_end were specified)

batch_size:                                                 # batch size (not used for NeRF/BARF)
max_epoch:                                                  # train to maximum number of epochs (not used for NeRF/BARF)
max_iter: 50000

freq:                                                      # periodic actions during training
    scalar: 100                                            # log losses and scalar states (every N iterations)
    vis: 1000                                              # visualize results (every N iterations)
    val: 2000                                             # validate on val set (every N iterations)
    ckpt: 5000                                             # save checkpoint (every N iterations)

gan:

